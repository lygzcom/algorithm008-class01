一、基本概念
		git优点:分布式每一个端点都保留详细的历史版本信息，当远程交互失效后任然可以在本地继续开发，
					如果需要合并代码，将需要合并的主机间用任意一个端点作为远程仓库就可以了。
		git:git有工作区、暂存区、本地仓库的概念；
			 git有三种状态，你的文件可能处于其中之一： 已提交（committed）、已修改（modified） 和 已暂存（staged） 
			 工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪					
		svn:集中式版本控制，简单，具有严格的权限控制。缺点：断网时无法提交、合并、查看历史版本等。
二、基本配置
		查看git的配置文件所在
		git config --list --show-origin
		git config –list
		git config <key>：来检查 Git 的某一项配置
		1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 git config 时带上--system 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）
		2. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 你可以传递 --global 选项让 Git读写此文件，这会对你系统上 所有 的仓库生效。
		3. 当前使用仓库的 Git 目录中的 config 文件（即 .git/config）：针对该仓库。 你可以传递 --local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。当然，你需要进入某个 Git 仓库中才能让该选项生效。）
		每一个级别会覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。

		配置用户
		git config --global user.name "Your Name"
		git config --global user.email email@example.com

		生成ssh密钥
		ssh-keygen -t rsa -C "youremail@example.com"
 
		获取帮助
		若你使用 Git 时需要获取帮助，有三种等价的方法可以找到 Git 命令的综合手册（manpage）：
		git help  <verb>
		git <verb> --help
		获取简略命令
		git <verb> -h 

三、基本命令
		获取 Git 仓库通常有两种获取：
			1. 将尚未进行版本控制的本地目录转换为 Git 仓库；
			2. 从其它服务器 克隆 一个已存在的 Git 仓库。
		初始化本地仓库
			git init
		克隆已经存在仓库
			git clone URL
		查看当前文件状态
			git status
			简明输出  git status -s 命令或 git status --short 命令
		忽略某些文件不加入版本控制
			.gitignore 
		将内容添加到下一次提交中   
			git add readme.txt
		要查看尚未暂存的文件更新了哪些部分，不加参数直接输入  
			git diff  
			git diff readme.txt 
		这条命令将比对已暂存 文件与最后一次提交的文件差异：
			git diff --staged  或 git diff --cached
		提交到本地仓库
			git commit -m "提交注释"
			不带-m将使用nano进行编辑提交的页面，退出方法为：Ctrl + X然后输入y再然后回车
			如果你想把默认编辑器换成别的：在GIT配置中设置 core.editor: git config --global core.editor "vim"
			只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤
			发现漏掉了几个文件没有添加，或者提交信息写错了如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令） 那么快照会保持不变，而你所修改的只是提交信息。
			git commit --amend
			最终你只会有一个提交——第二次提交将代替第一次提交的结果
			git commit -m 'initial commit'
			git add forgotten_file
			git commit --amend
		删除文件：提交后在仓库生效
			git rm 文件名 
			如果要删除之前修改过或已经放到暂存区的文件，则必须使用
			强制删除选项 -f（译注：即 force 的首字母）
		移除版本控制但是不删除文件（最好加入.gitignore ）
			git rm --cached 文件名或目录
			移动文件或者重命名等同于三步操作： mv README.md README 、  git rm README.md 、  git add README
			git mv file_from file_to
		查看日志 有很多参数（边用边学）
			git log  
		版本回退
			git reset --hard HEAD^
			git reset --hard 版本号id
			版本回退实际上只是改变了头结点的指针
			git reflog 显示历史过程中所有版本的版本id
		查看远程仓库 
			git remote 
			可选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL
		关联远程仓库
			git remote add origin  git@github.com:lygzcom/test.git
		从远程仓库拉取
			git fetch <remote>
			git pull
		推送数据到远程仓库
			git push <remote> <branch>。
			git push -u origin master
		查看某个远程仓库
			git remote show <remote> 命令	
		远程仓库的重命名
			git remote rename  
		移除远程仓库
			git remote remove 或 git remote rm ：
		列出标签
			git tag	按照通配符列出标签需要 -l 或 --list 选项如果你只想要完整的标签列表，那么运行 git tag 就会默认假定你想要一个列表，它会直接
			给你列出来， 此时的 -l 或 --list 是可选的。然而，如果你提供了一个匹配标签名的通配模式，那么 -l 或 --list 就是强制使用的。
		创建附注标签 
			git tag -a v1.4 -m "说明"
		查看标签信息
			git show  标签名
		轻量标签
			git tag 标签名

 

  